#pragma version >=0.2.0;

#include "common/stdlib.func";
#include "common/messages.func";
#include "common/reserves.func"; 
#include "common/utils.func";
#include "common/errors.func";
#include "common/params.func";
#include "common/op.func";

#include "register/globals.func";
#include "register/utils.func";
#include "register/storage.func";
#include "register/get.func";
#include "register/admin_calls.func";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if in_msg_body.slice_empty?() { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if flags & 1 {
        return ();
    }

    load_storage();

    ctx::sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    ctx::fwd_fee = muldiv(cs~load_coins(), 3, 2);
    
    force_chain(WORKCHAIN, ctx::sender_address, error::wrong_workchain);

    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));
    
    if (op == op::cast_vote) {
        ;; check if enough gas for 4 messages and a return message with remaining gas
        throw_unless(error::insufficient_gas, msg_value > (5 * ctx::fwd_fee) 
            + (4 * GAS_CONSUMPTION + MIN_TON_REGISTER + MIN_TON_VOTE_STATUS + MIN_TON_VOTE_STORAGE));
        
        (_, int hashpart) = parse_std_addr(ctx::sender_address);
        (_, int is_present?) = udict_get?(storage::address_list, 256, hashpart);

        ;; only users on the list can vote
        throw_unless(error::invalid_caller, is_present?);

        slice jetton_address = in_msg_body~load_msg_addr();
        int whitelist_vote = in_msg_body~load_uint(1);
        int blacklist_vote = in_msg_body~load_uint(1);

        ;; vote values cannot be the same
        throw_if(error::invalid_call, whitelist_vote == blacklist_vote);

        (cell state_init, slice vote_storage_address) = get_vote_storage_state_init_and_address(jetton_address);

        cell msg_body = begin_cell()
            .store_uint(op::cast_vote, 32)
            .store_uint(query_id, 64)
            .store_slice(ctx::sender_address)
            .store_uint(whitelist_vote, 1)
            .store_uint(blacklist_vote, 1)
        .end_cell();
        
        raw_reserve(max(my_balance - msg_value, MIN_TON_REGISTER), RESERVE_EXACTLY);
        ;; vote storage for this jetton might not exist yet
        send_message_with_stateinit(0, vote_storage_address, state_init, msg_body, CARRY_ALL_BALANCE);

        return ();
    }

    if (op == op::claim_admin) {
        throw_unless(error::invalid_caller, equal_slices(ctx::sender_address, storage::admin_pending));
        storage::admin_address = storage::admin_pending;
        storage::admin_pending = addr_none();

        save_storage();
        
        return ();
    }

    if (equal_slices(ctx::sender_address, storage::admin_address)) {
        handle_admin_messages(op, query_id, my_balance, msg_value, in_msg_body);
        return ();
    }

    throw(error::wrong_op);
}