#pragma version >=0.2.0;

#include "common/stdlib.func";
#include "common/messages.func";
#include "common/reserves.func"; 
#include "common/utils.func";
#include "common/errors.func";
#include "common/params.func";
#include "common/op.func";

#include "vote_storage/globals.func";
#include "vote_storage/utils.func";
#include "vote_storage/storage.func";
#include "vote_storage/get.func";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if in_msg_body.slice_empty?() { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if flags & 1 {
        return ();
    }

    load_storage();

    ctx::sender_address = cs~load_msg_addr();

    ;; gas is checked on register

    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    if (op == op::cast_vote) {
        ;; check if caller is register
        throw_unless(error::invalid_caller, equal_slices(ctx::sender_address, storage::register_address));
        
        slice user_address = in_msg_body~load_msg_addr();
        int white_vote = in_msg_body~load_uint(1);
        int black_vote = in_msg_body~load_uint(1);

        (cell state_init, slice vote_status_address) = get_vote_status_state_init_and_address(user_address);

        cell msg_body = begin_cell()
            .store_uint(op::verify_vote, 32)
            .store_uint(query_id, 64)
            .store_uint(white_vote, 1)
            .store_uint(black_vote, 1)
        .end_cell();
        
        raw_reserve(max(my_balance - msg_value, MIN_TON_VOTE_STORAGE), RESERVE_EXACTLY);
        send_message_with_stateinit(0, vote_status_address, state_init, msg_body, CARRY_ALL_BALANCE);

        return ();
    }
    
    if (op == op::add_vote) {
        slice user_address = in_msg_body~load_msg_addr();
        (_, slice vote_status_address) = get_vote_status_state_init_and_address(user_address);

        ;; check if caller is user's vote status contract
        throw_unless(error::invalid_caller, equal_slices(ctx::sender_address, vote_status_address));

        int white_add = in_msg_body~load_int(2);
        int black_add = in_msg_body~load_int(2);

        storage::white_votes += white_add;
        storage::black_votes += black_add;

        save_storage();

        ;; send remaining gas back to user
        send_empty_message(0, user_address, CARRY_REMAINING_GAS | IGNORE_ERRORS);

        return ();
    }

    if (op == op::reset_gas) {
        throw_unless(error::invalid_caller, equal_slices(ctx::sender_address, storage::register_address));

        slice admin_address = in_msg_body~load_msg_addr();

        raw_reserve(MIN_TON_VOTE_STORAGE, RESERVE_EXACTLY);

        send_empty_message(0, admin_address, CARRY_ALL_BALANCE | IGNORE_ERRORS);
        return ();
    }

    throw(error::wrong_op);
}